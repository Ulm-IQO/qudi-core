# Patch generated by Pyment v0.3.3

--- a/units.py
+++ b/units.py
@@ -41,7 +41,14 @@
     """
     Return the dictionary, which assigns the prefix of a unit to its proper order of magnitude.
 
-    @return dict: keys are string prefix and values are magnitude values.
+    Parameters
+    ----------
+
+    Returns
+    -------
+    type
+        dict: keys are string prefix and values are magnitude values.
+
     """
 
     unit_prefix_dict = {
@@ -67,28 +74,11 @@
 
 
 class ScaledFloat(float):
-    """
-    Format code 'r' for scaled output.
-
-    Examples
-    --------
-    '{:.0r}A'.format(ScaledFloat(50))       --> 50 A
-    '{:.1r}A'.format(ScaledFloat(1.5e3))    --> 1.5 kA
-    '{:.1r}A'.format(ScaledFloat(2e-3))     --> 2.0 mA
-    '{:rg}A'.format(ScaledFloat(2e-3))      --> 2 mA
-    '{:rf}A'.format(ScaledFloat(2e-3))      --> 2.000000 mA
-    """
+    """Format code 'r' for scaled output."""
 
     @property
     def scale(self):
-        """
-        Returns the scale. (No prefix if 0)
-
-        Examples
-        --------
-        1e-3: m
-        1e6: M
-        """
+        """Returns the scale. (No prefix if 0)"""
 
         # Zero makes the log crash and should not have a prefix
         if self == 0:
@@ -104,13 +94,7 @@
 
     @property
     def scale_val(self):
-        """Returns the scale value which can be used to devide the actual value
-
-        Examples
-        --------
-        m: 1e-3
-        M: 1e6
-        """
+        """Returns the scale value which can be used to devide the actual value"""
         scale_str = self.scale
         return get_unit_prefix_dict()[scale_str]
 
@@ -148,37 +132,47 @@
 
 
 def create_formatted_output(param_dict, num_sig_digits=5):
-    """Display a parameter set nicely in SI units.
-
-    @param dict param_dict: dictionary with entries being again dictionaries
-                       with two needed keywords 'value' and 'unit' and one
-                       optional keyword 'error'. Add the proper items to the
-                       specified keywords.
-                       Note, that if no error is specified, no proper
-                       rounding (and therefore displaying) can be
-                       guaranteed.
-
-    @param int num_sig_digits: optional, the number of significant digits will
-                               be taken, if the rounding procedure was not
-                               successful at all. That will ensure at least that
-                               not all the digits are displayed.
-                               According to that the error will be displayed.
-
-    @return str: a string, which is nicely formatted.
-
-    Note: The absolute tolerance to a zero is set to 1e-18.
-
-    Example of a param dict:
+    """
+    Display a parameter set nicely in SI units.
+
+    Parameters
+    ----------
+    dict :
+        param_dict: dictionary with entries being again dictionaries
+        with two needed keywords 'value' and 'unit' and one
+        optional keyword 'error'. Add the proper items to the
+        specified keywords.
+        Note, that if no error is specified, no proper
+        rounding (and therefore displaying) can be
+        guaranteed.
+    int :
+        num_sig_digits: optional, the number of significant digits will
+        be taken, if the rounding procedure was not
+        successful at all. That will ensure at least that
+        not all the digits are displayed.
+        According to that the error will be displayed.
+    param_dict :
+        
+    num_sig_digits :
+         (Default value = 5)
+
+    Returns
+    -------
+    type
+        str: a string, which is nicely formatted.
+        
+        Note: The absolute tolerance to a zero is set to 1e-18.
+        
+        Example of a param dict:
         param_dict = {'Rabi frequency': {'value':123.43,   'error': 0.321,  'unit': 'Hz'},
-                      'ODMR contrast':  {'value':2.563423, 'error': 0.523,  'unit': '%'},
-                      'Fidelity':       {'value':0.783,    'error': 0.2222, 'unit': ''}}
-
+        'ODMR contrast':  {'value':2.563423, 'error': 0.523,  'unit': '%'},
+        'Fidelity':       {'value':0.783,    'error': 0.2222, 'unit': ''}}
+        
         If you want to access on the value of the Fidelity, then you can do
         that via:
-            param_dict['Fidelity']['value']
+        param_dict['Fidelity']['value']
         or on the error of the ODMR contrast:
-            param_dict['ODMR contrast']['error']
-
+        param_dict['ODMR contrast']['error']
 
     """
     if fn is None:
@@ -241,60 +235,72 @@
 
 
 def round_value_to_error(value, error):
-    """The scientifically correct way of rounding a value according to an error.
-
-    @param float or int value: the measurement value
-    @param float or int error: the error for that measurement value
-
-    @return tuple(float, float, int):
-                float value: the rounded value according to the error
-                float error: the rounded error
-                int rounding_digit: the digit, to which the rounding
-                                    procedure was performed. Note a positive
-                                    number indicates the position of the
-                                    digit right from the comma, zero means
-                                    the first digit left from the comma and
-                                    negative numbers are the digits left
-                                    from the comma. That is a convention
-                                    which is used in the native round method
-                                    and the method numpy.round.
-
-    Note1: the input type of value or error will not be changed! If float is
-           the input, float will be the output, same applies to integer.
-
-    Note2: This method is not returning strings, since each display method
-           might want to display the rounded values in a different way.
-           (in exponential representation, in a different magnitude, ect.).
-
-    Note3: This function can handle an invalid error, i.e. if the error is
-           zero, NAN or infinite. The absolute tolerance to detect a number as
-           zero is set to 1e-18.
-
-    Procedure explanation:
-    The scientific way of displaying a measurement result in the presents of
-    an error is applied here. It is the following procedure:
+    """
+    The scientifically correct way of rounding a value according to an error.
+
+    Parameters
+    ----------
+    float :
+        or int value: the measurement value
+    float :
+        or int error: the error for that measurement value
+    value :
+        
+    error :
+        
+
+    Returns
+    -------
+    type
+        tuple(float, float, int):
+        float value: the rounded value according to the error
+        float error: the rounded error
+        int rounding_digit: the digit, to which the rounding
+        procedure was performed. Note a positive
+        number indicates the position of the
+        digit right from the comma, zero means
+        the first digit left from the comma and
+        negative numbers are the digits left
+        from the comma. That is a convention
+        which is used in the native round method
+        and the method numpy.round.
+        
+        Note1: the input type of value or error will not be changed! If float is
+        the input, float will be the output, same applies to integer.
+        
+        Note2: This method is not returning strings, since each display method
+        might want to display the rounded values in a different way.
+        (in exponential representation, in a different magnitude, ect.).
+        
+        Note3: This function can handle an invalid error, i.e. if the error is
+        zero, NAN or infinite. The absolute tolerance to detect a number as
+        zero is set to 1e-18.
+        
+        Procedure explanation:
+        The scientific way of displaying a measurement result in the presents of
+        an error is applied here. It is the following procedure:
         Take the first leading non-zero number in the error value and check,
         whether the number is a digit within 3 to 9. Then the rounding value
         is the specified digit. Otherwise, if first leading digit is 1 or 2
         then the next right digit is the rounding value.
         The error is rounded according to that digit and the same applies
         for the value.
-
-    Example 1:
+        
+        Example 1:
         x_meas = 2.05650234, delta_x = 0.0634
-            => x =  2.06 +- 0.06,   (output: (2.06, 0.06, 2)    )
-
-    Example 2:
+        => x =  2.06 +- 0.06,   (output: (2.06, 0.06, 2)    )
+        
+        Example 2:
         x_meas = 0.34545, delta_x = 0.19145
-            => x = 0.35 +- 0.19     (output: (0.35, 0.19, 2)    )
-
-    Example 3:
+        => x = 0.35 +- 0.19     (output: (0.35, 0.19, 2)    )
+        
+        Example 3:
         x_meas = 239579.23, delta_x = 1289.234
-            => x = 239600 +- 1300   (output: (239600.0, 1300.0, -2) )
-
-    Example 4:
+        => x = 239600 +- 1300   (output: (239600.0, 1300.0, -2) )
+        
+        Example 4:
         x_meas = 961453, delta_x = 3789
-            => x = 961000 +- 4000   (output: (961000, 4000, -3) )
+        => x = 961000 +- 4000   (output: (961000, 4000, -3) )
 
     """
 
@@ -335,12 +341,22 @@
 
 
 def get_relevant_digit(entry):
-    """By using log10, abs and int operations, the proper relevant digit is
+    """
+    By using log10, abs and int operations, the proper relevant digit is
         obtained.
 
-    @param float entry:
-
-    @return: int, the leading relevant exponent
+    Parameters
+    ----------
+    float :
+        entry:
+    entry :
+        
+
+    Returns
+    -------
+    type
+        int, the leading relevant exponent
+
     """
 
     # the log10 can only be calculated of a positive number.
@@ -360,14 +376,24 @@
 
 
 def get_si_norm(entry):
-    """A rather different way to display the value in SI notation.
-
-    @param float entry: the float number from which normalization factor should
-                        be obtained.
-
-    @return: norm_val, normalization
-            float norm_val: the value in a normalized representation.
-            float normalization: the factor with which to divide the number.
+    """
+    A rather different way to display the value in SI notation.
+
+    Parameters
+    ----------
+    float :
+        entry: the float number from which normalization factor should
+        be obtained.
+    entry :
+        
+
+    Returns
+    -------
+    type
+        norm_val, normalization
+        float norm_val: the value in a normalized representation.
+        float normalization: the factor with which to divide the number.
+
     """
     val = get_relevant_digit(entry)
     fact = int(val / 3)
